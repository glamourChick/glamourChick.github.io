<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简述java类加载机制</title>
      <link href="/2019/08/05/%E7%AE%80%E8%BF%B0%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/08/05/%E7%AE%80%E8%BF%B0%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;在面试中常会看到关于Java类加载机制的题目，今天特地整理了下加载机制的资料。</p><p>&emsp;&emsp;所谓的类加载机制就是JVM使用类加载器将编译生成的Class文件动态加载到JVM的内存空间中，最终形成可以被JVM使用的Java类型。JVM执行class字节码的过程可以分为：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)、卸载(Unloading)这些阶段。其中验证、准备、解析3个部分统称为链接（Linking）。</p><h2 id="加载："><a href="#加载：" class="headerlink" title="加载："></a>加载：</h2><p>加载就是将class文件读入内存，并为之创建一个java.lang.Class对象，系统中所有的类都是java.lang.Class的实例。<br>类的加载由类加载器完成，类加载器通常由JVM提供，这些类加载器也是前面所有程序运行的基础，JVM提供的这些类加载器通常被称为系统类加载器。除此之外，开发者可以通过继承ClassLoader基类来创建自己的类加载器。<br>该阶段JVM完成三件事：</p><ol><li>通过来获取其定义的二进制字节流；</li><li>将字节流所代表的静态存储结构转化为方法区的运行时数据结构；</li><li>在内存中生成一个该类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li></ol><p>类加载器通常无须等到“首次使用”该类时才加载该类，Java虚拟机规范允许系统预先加载某些类。如果这个类出错，但是应用程序没有调用这个类， JVM也不会报错。</p><h2 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h2><p>验证的主要作用就是确保被加载的类的正确性。主要是完成四个阶段的验证：</p><ol><li>文件格式的验证：验证.class文件字节流是否符合class文件的格式的规范，并且能够被当前版本的虚拟机处理。例如：主，次版本号是否在当前虚拟机处理的范围之内。</li><li>元数据验证：主要是对字节码描述的信息进行语义分析，以保证其描述的信息符合java语言规范的要求。例如：类是否有父类、是否继承了不允许被继承的类。</li><li>字节码验证：主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li><li>符号引用验证：确保解析动作能正常执行。</li></ol><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><p>在准备阶段，JVM 会为类变量（static修饰的变量）分配内存，并为其初始化。但是这里的初始化指的是为变量赋予 Java 语言中该数据类型的零值，而不是用户代码里初始化的值。<br>如：public static int age = 20; 这里age为0，而不是20。但如果一个变量是常量（被 static final 修饰）的话，那么在准备阶段，属性便会被赋予用户希望的值。<br>如：public static final int age = 20; 这里age便是20，因为final修饰的变量赋值后不可更改，所以初始化就要给用户定义的值。</p><h2 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h2><p>是虚拟机将常量池内的符号引用替换为直接引用的过程</p><h2 id="初始化："><a href="#初始化：" class="headerlink" title="初始化： "></a>初始化： </h2><p>在初始化阶段，主要为类的静态变量赋予正确的初始值, 在Java中对类变量进行初始值设定有两种方式：</p><ol><li>声明类变量是指定初始值</li><li>使用静态代码块为类变量指定初始值<br>JVM初始化步骤：</li><li>这个类还没有被加载和连接，则程序先加载并连接该类;</li><li>该类的直接父类还没有被初始化，则先初始化其直接父类;</li><li>类中有初始化语句，则系统依次执行这些初始化语句;</li></ol><p>类初始化时机：只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种：  </p><ol><li>创建类的实例时（new、反射、反序列化）;</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值;</li><li>调用类的静态方法;</li><li>反射（如 Class.forName(“com.shengsiyuan.Test”)）;</li><li>初始化某个类的子类，则其父类也会被初始化;</li><li>Java虚拟机启动时被标明为启动类的类（包含main()方法的那个类），直接使用 java.exe命令来运行某个主类;</li></ol><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类。 类加载器负责加载所有的类，其为所有被载入内存中的类生成一个java.lang.Class实例对象。一旦一个类被加载如JVM中，同一个类就不会被再次载入了。正如一个对象有一个唯一的标识一样，一个载入JVM的类也有一个唯一的标识。在Java中，一个类用其全限定类名（包括包名和类名）作为标识；但在JVM中，一个类用其全限定类名和其类加载器作为其唯一标识。例如，如果在pg的包中有一个名为Person的类，被类加载器ClassLoader的实例kl负责加载，则该Person类对应的Class对象在JVM中表示为(Person.pg.kl)。这意味着两个类加载器加载的同名类：（Person.pg.kl）和（Person.pg.kl2）是不同的、它们所加载的类也是完全不同、互不兼容的。</p><p> JVM预定义有三种类加载器:</p><ol><li>根类加载器（Bootstrap ClassLoader）：最顶层的类加载器，负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li><li>扩展类加载器（Extension ClassLoader）：负责加载 JAVA_HOME\lib\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li><li>应用程序类加载器（ApplicationClassLoader）：也叫做系统类加载器，可以通过getSystemClassLoader()获取，负责加载用户路径（classpath）上的类库。如果没有自定义类加载器，一般这个就是默认的类加载器。</li></ol><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>JVM的类加载机制主要有如下3种。</p><ol><li><p>全盘负责：所谓全盘负责，就是当一个类加载器负责加载某个Class时，该Class所依赖和引用其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入。</p></li><li><p>双亲委派：所谓的双亲委派，则是先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。通俗的讲，就是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父加载器，依次递归，如果父加载器可以完成类加载任务，就成功返回；只有父加载器无法完成此加载任务时，才自己去加载。</p></li><li><p>缓存机制。缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区中搜寻该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓冲区中。这就是为很么修改了Class后，必须重新启动JVM，程序所做的修改才会生效的原因。</p><p><strong>双亲委派机制的优势：</strong>Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言</title>
      <link href="/2019/07/15/%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%80%BB%E8%A6%81%E8%AF%B4%E7%82%B9%E5%95%A5/"/>
      <url>/2019/07/15/%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%80%BB%E8%A6%81%E8%AF%B4%E7%82%B9%E5%95%A5/</url>
      
        <content type="html"><![CDATA[<p>在CSDN,博客园写了一些博客后，最终还是搞了一个自己的博客，从今以后开始记录自己生活的点点滴滴。可以记录自己工作学习中绕过的弯，踩过的坑；可以记录自己身边好玩、有趣的事；甚至可以没事写点小说。博客就像自种田，三分自留地，中出新天地。默默耕耘，等待收获。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
